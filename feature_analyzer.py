class FeatureAnalyzer:
    def __init__(self):
        # Define feature patterns to look for
        self.features = {
            'authentication': {
                'files': ['auth', 'login', 'signup', 'jwt', 'passport'],
                'code': ['authenticate', 'authorization', 'jwt', 'token', 'session', 'oauth', 'password'],
            },
            'database': {
                'files': ['db', 'database', 'model', 'schema'],
                'code': ['mongoose', 'sequelize', 'prisma', 'sql', 'database', 'query'],
            },
            'caching': {
                'files': ['cache', 'redis'],
                'code': ['cache', 'redis', 'memcached', 'caching'],
            },
            'storage': {
                'files': ['storage', 's3', 'upload'],
                'code': ['storage', 'aws-sdk', 'cloudinary', 'multer', 'upload'],
            },
            'microservices': {
                'files': ['service', 'api', 'gateway'],
                'code': ['microservice', 'kafka', 'rabbitmq', 'message queue', 'grpc'],
            }
        }

    def analyze_directory_structure(self, directory_content):
        found_features = {feature: False for feature in self.features}

        # Convert to lowercase for case-insensitive matching
        directory_content = directory_content.lower()

        # Check each feature's file patterns
        for feature, patterns in self.features.items():
            for pattern in patterns['files']:
                if pattern.lower() in directory_content:
                    found_features[feature] = True
                    break

        return found_features

    def analyze_code_content(self, code_content):
        found_features = {feature: False for feature in self.features}

        # Convert to lowercase for case-insensitive matching
        code_content = code_content.lower()

        # Check each feature's code patterns
        for feature, patterns in self.features.items():
            for pattern in patterns['code']:
                if pattern.lower() in code_content:
                    found_features[feature] = True
                    break

        return found_features

    def analyze_project(self, directory_content, code_content):
        dir_features = self.analyze_directory_structure(directory_content)
        code_features = self.analyze_code_content(code_content)

        # Combine results (if either analysis found the feature)
        combined_features = {
            feature: (dir_features[feature] or code_features[feature])
            for feature in self.features
        }

        return {
            'directory_analysis': dir_features,
            'code_analysis': code_features,
            'combined_analysis': combined_features
        }

if __name__ == "__main__":
    # Read the files generated by the scraper
    with open('directory_structure.txt', 'r', encoding='utf-8') as f:
        directory_content = f.read()

    with open('code_content_clean.txt', 'r', encoding='utf-8') as f:
        code_content = f.read()

    # Analyze the project
    analyzer = FeatureAnalyzer()
    results = analyzer.analyze_project(directory_content, code_content)

    # Print results in a readable format
    print("\nFeature Analysis Results:")
    print("========================")
    for feature, present in results['combined_analysis'].items():
        status = "✓" if present else "✗"
        print(f"{feature.capitalize()}: {status}")
