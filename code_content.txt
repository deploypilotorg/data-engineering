================================================
File: README.md
================================================
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `yarn start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `yarn test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `yarn build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `yarn eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `yarn build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)
# focus-app


================================================
File: index.html
================================================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Get more work done with focus vest"
    />
    <link rel="apple-touch-icon" href="/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="/manifest.json" />
    <!--
      Notice the use of  in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>Focus vest</title>
    
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <script type="module" src="/src/index.jsx"></script>
  </body>
</html>


================================================
File: package.json
================================================
{
  "name": "bella-chef",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@ckeditor/ckeditor5-build-classic": "^39.0.1",
    "@ckeditor/ckeditor5-react": "^6.1.0",
    "@emotion/react": "^11.11.1",
    "@emotion/styled": "^11.11.0",
    "@mui/icons-material": "^5.14.3",
    "@mui/material": "^5.14.5",
    "@nhost/react": "^0.13.0",
    "@reduxjs/toolkit": "^1.9.5",
    "@tailwindcss/forms": "^0.5.3",
    "@testing-library/jest-dom": "^5.14.1",
    "@testing-library/react": "^13.0.0",
    "@testing-library/user-event": "^13.2.1",
    "autoprefixer": "^10.4.7",
    "firebase": "^9.12.1",
    "formik": "^2.4.3",
    "graphql": "^16.6.0",
    "moment": "^2.29.4",
    "postcss": "^8.4.14",
    "react": "^18.1.0",
    "react-circular-progressbar": "^2.1.0",
    "react-dom": "^18.1.0",
    "react-icons": "^4.10.1",
    "react-redux": "^8.1.2",
    "react-router-dom": "^6.3.0",
    "react-slider": "^2.0.4",
    "redux": "^4.2.0",
    "redux-logger": "^3.0.6",
    "tailwindcss": "^3.0.24",
    "web-vitals": "^2.1.0"
  },
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "serve": "vite preview"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@vitejs/plugin-react": "^4.0.4",
    "vite": "^4.4.9"
  }
}


================================================
File: postcss.config.js
================================================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}


================================================
File: tailwind.config.js
================================================
/** @type {import('tailwindcss').Config} */ 
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
  ],
  // sidebr #202020
// min #272727
// boxes #323232
// current nvbr #2d2d2d
  theme: {
    colors: {
      'primary': '#1e272e',
      'white': '#fff',
      'secondary': '#3e3e3e',  
      'tertiary': '#09c7e1',    
      'card': '#222b32',
      'sidebar': '#2b343b'
    },
    fontFamily: {
      'headings': ['Poppins', 'sans-serif'],
      'body': ['Montserrat', 'sans-serif'],
    },
    extend: {
      backgroundImage: {
        'hero-img': "url('./components/assets/bg.png')",
        'footer-img': "url('./components/assets/footerbg.png')"
      },
      height: {
        '128': '39rem',
        '130': '32rem'
      },
      width: {        
        '129': '59rem',
        '131': '30rem'
      }
    },
  },
  plugins: [
    require('@tailwindcss/forms'),
  ],
}


================================================
File: vite.config.js
================================================
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";


export default defineConfig(() => {
  return {
    // https://github.com/vitejs/vite/issues/1973#issuecomment-787571499
    define: {
      "process.env": {},
    },
    server: {
      open: true,
    },
    build: {
      outDir: "build",
    },
    plugins: [
      react()  
    ],
  };
});


================================================
File: public/_redirects
================================================
/*    /index.html  200

================================================
File: public/manifest.json
================================================
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}


================================================
File: public/robots.txt
================================================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:


================================================
File: src/App.jsx
================================================
import React, { useState, useEffect } from 'react';
import bg from './components/assets/bg.png';
// import Sidebar from './components/widgets/Sidebar';
import Home from './page/Home';
import Notes from './page/Notes';
import Signup from './page/Signup';
import Login from './page/Login';
import { Routes, Route } from 'react-router-dom';
// import Navbar from './components/widgets/Navbar';
import Layout from './components/widgets/Layout';
import { BrowserRouter as Router } from 'react-router-dom';
import NoteDetail from './page/NoteDetail';
import ProtectedRoute from './components/widgets/ProtectedRoute';
import { useDispatch, useSelector } from 'react-redux';
import { getCurrentUser } from './store/features/userSlice';
import NotFound from './page/NotFound';


function App() {

  const dispatch = useDispatch();
  const user = useSelector((state) => state.user.value);
  // const user = "asasa";
  console.log(user);

  useEffect(() => {
    dispatch(getCurrentUser());
  }, [dispatch])


  return (
    <Router>
      <div className="md:overflow-x-auto overflow-x-hidden bg-primary">
        <section>
          <div>
            <Routes>
              <Route element={<ProtectedRoute user={user} />}>
                <Route
                  path="/home"
                  element={
                    < Home />
                  }
                />

                <Route
                  path="/notes/:id"
                  element={<NoteDetail />}
                />

                <Route
                  path="/notes"
                  element={
                    < Notes />
                  }
                />

              </Route>

              <Route path="/signup" element={<Signup />} />
              <Route path="/" element={<Login />} />
              <Route path="*" element={< NotFound />} />
            </Routes>
          </div>
        </section>

      </div>
    </Router>
  );
}

export default App;





================================================
File: src/firebase.js
================================================
// Import the functions you need from the SDKs you need
import { initializeApp } from "firebase/app";
import { getAuth  } from "firebase/auth";
import { getFirestore } from "firebase/firestore";
// TODO: Add SDKs for Firebase products that you want to use
// https://firebase.google.com/docs/web/setup#available-libraries

// Your web app's Firebase configuration
const firebaseConfig = {
  apiKey: import.meta.env.VITE_API_KEY,
  authDomain: import.meta.env.VITE_AUTH_DOMAIN,
  projectId: import.meta.env.VITE_PROJECT_ID,
  storageBucket: import.meta.env.VITE_STORAGE_BUCKET,
  messagingSenderId: import.meta.env.VITE_MESSAGING_SENDER_ID,
  appId: import.meta.env.VITE_APP_ID,
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
// Initialize Firebase Authentication and get a reference to the service
export const auth = getAuth(app);
export const db = getFirestore(app);
export default app;

================================================
File: src/index.css
================================================
================================================
File: src/index.jsx
================================================
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
// import { BrowserRouter as Router } from 'react-router-dom';
import { store } from './store';
import { Provider } from 'react-redux';


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>

    <Provider store={store}>
      <App />
    </Provider>

  </React.StrictMode>
);




================================================
File: src/Api/index.jsx
================================================
import React, {useState, useEffect} from 'react';

const index = () => {
    // const [data, setData] = useState([]);

    // const fetchProducts = () => {
    //     fetch('https://fakestoreapi.com/products')
    //         .then(data=>data.json())
    //         .then(data=>console.log(data))
    // }
    useEffect(()=>{
        // fetchProducts();
        fetch(`https://fakestoreapi.com/products`)
            .then(res=>res.json())
            .then(json=>console.log(json))

            console.log("yes")
    },[])

  return (
    <div>
        index
    </div>
  )
}

export default index

================================================
File: src/components/elements/Button/index.jsx
================================================
import React from 'react'

const index = ({children, className, onClick, ...rest}) => {
  return (
    <button
      className={`rounded-lg py-2 px-8 text-white bg-sidebar hover:bg-secondary text-sm font-semibold ${className}`}    
      onClick={onClick}
      {...rest}
    >
        {children}
    </button>
  )
}

export default index

================================================
File: src/components/elements/Card/index.jsx
================================================
import React from 'react';

const index = ({children, className}) => {
  return (
    <div       
      className={`bg-card px-6 py-10 rounded-xl ${className}`}
    >
      {children}
    </div>
  )
}

export default index

================================================
File: src/components/elements/Container/index.jsx
================================================
import React from 'react';
import Card from '../Card';

const index = ({children, className}) => {
  return (
    <Card
      className={`mx-auto my-10 w-4/5 ${className}`}
    >
      {children}
    </Card>
  )
}

export default index

================================================
File: src/components/elements/Text/index.jsx
================================================
import React from 'react'

const index = ({children, className, ...rest}) => {
  return (
    <p
        className={`${className}`}
        {...rest}
    >
        {children}
    </p>
  )
}

export default index

================================================
File: src/components/widgets/Layout.jsx
================================================
import { Outlet } from 'react-router-dom';
import Navbar from './Navbar';
import Sidebar from './Sidebar';

const Layout = ({ children }) => {
    return (
        <section className="relative">
            <div className="fixed top-0 left-0 h-screen bg-sidebar md:w-72">
                < Sidebar />
            </div>


            <div className="md:pl-80 md:pr-4">
                <Navbar />
                <Outlet />
            </div>
        </section>
    )
}

export default Layout

================================================
File: src/components/widgets/Navbar.jsx
================================================
import React, { useState } from 'react';
import Text from '../elements/Text';
import { signOut } from "firebase/auth";
import { auth } from '../../firebase';
import { NavLink, useNavigate } from 'react-router-dom';
import { BsPersonCircle } from 'react-icons/bs';
import { Box, Divider, List } from '@mui/material';
import SwipeableDrawer from '@mui/material/SwipeableDrawer';
import { FaBars } from 'react-icons/fa';
import { useSelector } from 'react-redux';

const Navbar = () => {
    const [open, setOpen] = useState(false);
    const [state, setState] = useState({
        left: false,
    });

    const user = useSelector((state) => state.user.value);

    const toggleDrawer = (anchor, open) => (event) => {
        if (
            event &&
            event.type === 'keydown' &&
            (event.key === 'Tab' || event.key === 'Shift')
        ) {
            return;
        }

        setState({ ...state, [anchor]: open });
    };

    const navigate = useNavigate();

    const handleLogout = () => {


        signOut(auth).then(() => {
            // Sign-out successful.
            navigate("/");
            console.log("Signed out successfully")
        }).catch((error) => {
            // An error happened.
        });

    }

    const handleOpenNavbar = () => {
        setOpen(prev => !prev);
    }

    const list = (anchor) => (
        <Box
            className="bg-sidebar h-screen text-white"
            sx={{ width: anchor === 'top' || anchor === 'bottom' ? 'auto' : 250 }}
            role="presentation"
            onClick={toggleDrawer(anchor, false)}
            onKeyDown={toggleDrawer(anchor, false)}
        >
            <Divider />

            <List>
                <div>
                    <ul>
                        <Text className="pl-4 text-2xl mt-6 font-bold mb-12">
                            Focus<span className="text-tertiary">Vest</span>
                        </Text>

                        <NavLink
                            to="/home"
                            className={({ isActive }) =>
                                isActive ? "bg-secondary w-full block border-l-2 border-l-tertiary mr-2 py-3  text-sm"
                                    :
                                    "mr-2 text-sm py-3 "
                            }
                        >
                            <li className="p-4 ">
                                Home
                            </li>
                        </NavLink>

                        <NavLink
                            to="/notes"
                            className={({ isActive }) =>
                                isActive ? "bg-secondary w-full block border-l-2 border-l-tertiary mr-2 py-3  text-sm"
                                    :
                                    "mr-2 text-sm py-3 pl-4"
                            }
                        >
                            <li className="p-4 ">
                                Notes
                            </li>
                        </NavLink>
                    </ul>
                </div>
            </List>
        </Box>
    );


    return (
        <>

            <nav className="flex justify-between px-3 pt-8">
                <div className='flex items-center space-x-2'>
                    <div className='md:hidden block'>
                        {['left'].map((anchor) => (
                            <div className='flex items-center' key={anchor}>
                                <button onClick={toggleDrawer(anchor, true)}>
                                    <FaBars className='text-white' />
                                </button>
                                <SwipeableDrawer
                                    anchor={anchor}
                                    open={state[anchor]}
                                    onClose={toggleDrawer(anchor, false)}
                                    onOpen={toggleDrawer(anchor, true)}
                                >
                                    {list(anchor)}
                                </SwipeableDrawer>
                            </div>
                        ))}
                    </div>
                    <Text className="text-white font-bold text-xl">
                        Welcome, <span> {user.displayName} </span>
                    </Text>
                </div>

                <div className='relative space-y-2'>

                    {/* <BsPencilSquare  /> */}
                    <BsPersonCircle onClick={handleOpenNavbar} className='cursor-pointer text-white' />
                    {
                        open && <div className='absolute top-5 right-0 flex justify-end border border-slate-500 bg-sidebar z-40'>
                            <div className='flex flex-col text-right justify-right pl-20 pr-2 py-4 space-y-4'>
                                <button className="text-right text-xs text-white underline">
                                    View Profile
                                </button>
                                <button className="px-6 py-2 text-xs text-white bg-secondary" onClick={handleLogout}>
                                    Logout
                                </button>
                            </div>
                        </div>
                    }
                </div>


            </nav>
        </>
    )
}

export default Navbar;

================================================
File: src/components/widgets/Pomodoro.jsx
================================================
import React, { useEffect, useState } from 'react';
import Card from '../elements/Card';
import Text from '../elements/Text';
import Button from '../elements/Button';

const Pomodoro = () => {
    const [workTime, setWorkTime] = useState(25);
    const [restTime, setRestTime] = useState(5);
    const [isRunning, setIsRunning] = useState(false);
    const [timerLabel, setTimerLabel] = useState('Work');
    const [timer, setTimer] = useState(workTime * 60);
    const [restTimer, setRestTimer] = useState(restTime * 60);

    const formatTime = seconds => {
        const mins = Math.floor(seconds / 60);
        const secs = seconds % 60;
        return `${mins.toString().padStart(2, '0')}m : ${secs.toString().padStart(2, '0')}s`;
    };

    const toggleTimer = () => {
        setIsRunning(prevState => !prevState)
    }

    const resetTimer = () => {
        setIsRunning(false);
        setTimerLabel('Work');
        setTimer(workTime * 60);
        setRestTimer(restTime * 60);
    }

    useEffect(() => {
        let intevalId;

        if (isRunning && timer > 0) {
            intevalId = setInterval(() => {
                setTimer(prevState => prevState - 1);
            }, 1000)
        }
        else if (timer === 0) {
            clearInterval(intevalId);
            toggleTimer();
            if (timerLabel === 'Work') {
                setTimerLabel('Break');
                setTimer(restTimer);
            } else {
                setTimerLabel('Work');
                setTimer(workTime);
            }
        }

        return () => {
            clearInterval(intevalId);
        };
    }, [isRunning, timer, timerLabel, workTime, restTime])

    return (
        <Card className="text-center pb-16">
            <Text className="font-semibold text-xl">
                Ready, set, focus!
            </Text>

            <Text className="text-sm pt-2">
                Achieve your daily goals and get more
                done using the Pomodoro Technique
            </Text>            

            <div className="flex justify-center items-center mt-8">
                <div className="py-2 px-4 rounded-md border-b border-x-0 border-x-white border-t-0 border-t-white border-white ">
                    <div className='px-4 flex space-x-4 rounded-md'>
                        <div className='flex flex-col'>
                            <span className="text-4xl font-semibold">
                                {formatTime(timer)}
                            </span>
                        </div>

                    </div>
                </div>
            </div>



            <Text className="text-sm mt-6">
                {timerLabel === 'Work' && <span>It's time work</span>}
                {timerLabel === 'Break' && <span>Time to take some rest</span>}
            </Text>

            <div className='flex flex-col'>
                <Button onClick={toggleTimer} className="mt-6 w-auto px-10 mx-auto">
                    {isRunning ? "Pause session" : "Start session"}
                </Button>

                <Button onClick={resetTimer} className="mt-6 w-auto mx-auto">
                    Reset
                </Button>
            </div>
        </Card>
    )
}

export default Pomodoro

================================================
File: src/components/widgets/ProtectedRoute.jsx
================================================
import React from 'react'
import { Navigate, Outlet } from 'react-router-dom'
import Sidebar from './Sidebar';
import Navbar from './Navbar';

const ProtectedRoute = ({ user, children }) => {
    if (!user) {
        return <Navigate to="/login" replace />
    }
    return children ? children : (
        <section className="relative">
            <div className="fixed top-0 left-0 h-screen bg-sidebar sidebar-width">
                < Sidebar />
            </div>


            <div className="main-width md:pr-4">
                <Navbar />
                <Outlet />
            </div>
        </section>
    );
}

export default ProtectedRoute

================================================
File: src/components/widgets/Settings.jsx
================================================
import React, { useState } from 'react';
import Text from '../elements/Text';
import Card from '../elements/Card';
import Button from '../elements/Button';
import ReactSlider from 'react-slider';

const Settings = ({setOpen, workMin, breakMin, setBreakMin, setWorkMin}) => {
    

    const backButton = () => {
        setOpen(false);
    }

    return(
        <>
            <Card>
                <Text className="text-center text-white">
                    Focus time (in minutes): 45 {workMin}
                </Text>
                <ReactSlider
                    className="horizontal-slider mt-2 border border-tertiary rounded-3xl h-10"
                    thumbClassName="example-thumb h-10 w-10 rounded-3xl bg-white"
                    trackClassName="example-track"
                    value={workMin}
                    onChange={(e)=>setWorkMin(e)}
                    min={1}
                    max={120}
                    renderThumb={(props, state) => <div {...props}>{state.valueNow}</div>}
                />
                
            </Card>

            <Card>
                <Text className="text-center text-white">
                    Break time (in minutes): 15 {breakMin}
                </Text>
                <ReactSlider
                    className="horizontal-slider mt-2 border border-tertiary rounded-3xl h-10"
                    thumbClassName="example-thumb h-10 w-10 rounded-3xl bg-white"
                    trackClassName="example-track"
                    value={breakMin}
                    onChange={(e)=>setBreakMin(e)}
                    min={1}
                    max={120}
                    renderThumb={(props, state) => <div {...props}>{state.valueNow}</div>}
                />
            </Card>

            <div>
                <Button onClick={backButton} className="py-1 px-6">
                   Get started
                </Button>
            </div>
            
        </>
    )
}

export default Settings

================================================
File: src/components/widgets/Sidebar.jsx
================================================
import React from 'react';
import Text from '../elements/Text';
import { NavLink } from 'react-router-dom';

const Sidebar = () => {
    return (
        <aside className="text-white md:block hidden">
            <ul>
                <Text className="md:block hidden text-2xl pl-4 mt-6 font-bold mb-12">
                    Focus<span className="text-tertiary">Vest</span>
                </Text>

                <div className='flex flex-col md:hidden items-center justify-between p-4 mt-6 space-y-6   mb-12'>
                    <Text className="text-sm "> X </Text>
                    <Text className="text-2xl font-bold">
                        F<span className="text-tertiary">V</span>
                    </Text>


                </div>


                <NavLink
                    to="/home"
                    className={({ isActive }) =>
                        isActive ? "bg-secondary w-full block border-l-2 border-l-tertiary mr-2 py-3  text-sm"
                            :
                            "mr-2 text-sm py-3 "
                    }
                >
                    <li className="p-4 ">
                        Home
                    </li>
                </NavLink>

                <NavLink
                    to="/notes"
                    className={({ isActive }) =>
                        isActive ? "bg-secondary w-full block border-l-2 border-l-tertiary mr-2 py-3  text-sm"
                            :
                            "mr-2 text-sm py-3 pl-4"
                    }
                >
                    <li className="p-4">
                        Notes
                    </li>
                </NavLink>

            </ul>
        </aside>
    )
}

export default Sidebar

================================================
File: src/components/widgets/Time.jsx
================================================
import React, { useState, useEffect, useRef } from 'react';
import { CircularProgressbar, buildStyles  } from 'react-circular-progressbar';
import 'react-circular-progressbar/dist/styles.css';
import Button from '../elements/Button';
import Card from '../elements/Card';

const red = '#f54e4e';
const green = '#4aec8c';

const Time = ({ workMin, breakMin, setBreakMin, setWorkMin}) => {
    
    const [isPaused, setIsPaused] = useState(true);
    const [secondsLeft, setSecondsLeft] = useState(0);
    const [mode, setMode] = useState("work");
    const secondsLeftRef = useRef(secondsLeft);
    const isPausedRef = useRef(isPaused);
    const modeRef = useRef(mode);

    
    function tick(){
        secondsLeftRef.current= secondsLeftRef.current -1;
        setSecondsLeft(secondsLeftRef.current);
    }

    const initTimer = () => {
        setSecondsLeft(workMin*60);
    }

    const switchMode = () => {
        const nextMode = modeRef.current === 'work'? 'break': 'work';
        const nextSeconds = (nextMode ==='work' ? workMin : breakMin)*60;
        setMode(nextMode);
        modeRef.current = nextMode;
        setSecondsLeft(nextSeconds);
        secondsLeftRef.current = nextSeconds;
    }

    useEffect(() => {
        initTimer();

        const interval = setInterval(()=>{
            if(isPausedRef.current) {
                return;
            }

            if(secondsLeftRef.current === 0){
               return switchMode();
            }

            tick();
            console.log(tick())
            console.log(secondsLeftRef.current)
        }, 1000);

        return () => clearInterval(interval);
    }, [workMin, breakMin, setBreakMin, setWorkMin])

    const totalSeconds = mode === 'work'? workMin*60 : breakMin*60
    const percentage = Math.round(secondsLeft/totalSeconds)*100;

    const minutes = Math.floor(secondsLeft/60);
    let seconds = secondsLeft%60;
    if(seconds<10) {
        seconds= '0' + seconds;
    }

    console.log(minutes,seconds)


    return (
        <>
            <Card>
                <div>
                    <CircularProgressbar 
                        value={percentage} 
                        // text={`${66}%`} 
                        text={minutes+":"+seconds}
                        styles={buildStyles({
                        
                        rotation: 0.5,                        
                        strokeLinecap: 'butt',                                            
                        pathTransitionDuration: 0.5,                    
                        pathColor: red,
                        textColor: '#f88',
                        trailColor: '#d6d6d6',
                        backgroundColor: '#3e98c7',
                        })}  
                    />
                </div>

                <div className="flex items-center justify-center mt-6 space-x-4">
                  {isPaused? (
                    <Button onClick={() => tick()} className="py-1 px-6">
                        Play
                    </Button>
                  )
                  :
                  (
                    <Button className="py-1 px-6">
                        Pause
                    </Button>
                  )}
                    
                </div>
            </Card>
        </>
    )
}

export default Time

================================================
File: src/page/Home.jsx
================================================
import React, { useState, useEffect, useRef } from 'react';
import Card from '../components/elements/Card';
import Text from '../components/elements/Text';
import Button from '../components/elements/Button';
import Time from '../components/widgets/Time';
import Settings from '../components/widgets/Settings';
import { onAuthStateChanged } from "firebase/auth";
import { auth } from '../firebase';
import { useDispatch, useSelector } from 'react-redux';
import { getCurrentUser } from '../store/features/userSlice';
import { notesFetch } from '../store/features/noteSlice';
import { useNavigate } from 'react-router-dom';
import Pomodoro from '../components/widgets/Pomodoro';
// import { getAllUserNotes } from '../store/features/noteSlice';

const Home = () => {

    const user = useSelector((state) => state.user.value);
    const { value, status } = useSelector((state) => state.note);
    
    const dispatch = useDispatch();

    const navigate = useNavigate();


    useEffect(() => {      

        const intervalID = setInterval(() => {
            // console.log("yes")
        }, 1000)

        return () => clearInterval(intervalID);
    }, [])

    useEffect(() => {
        dispatch(getCurrentUser());
    }, [dispatch])
    // console.log("user here: ", user.uid);

    useEffect(() => {
        dispatch(notesFetch(user.uid))
    }, [dispatch, user.uid])


    return (
        <section className="text-white pt-10 pb-24 px-3  md:pt-10 md:pb-20">

            <section className="grid grid-cols-1 space-y-6 md:space-y-0 md:gap-4">
                <Pomodoro />

                {/* notes */}
                <Card className="py-4 col-span-2">
                    <div className="flex justify-between">
                        <Text className="text-lg font-semibold mb-10">
                            Notes
                        </Text>

                        <div
                            className="text-2xl cursor-pointer"
                            onClick={() => navigate("/notes")}
                        >
                            +
                        </div>
                    </div>

                    <section className="flex justify-center items-center text-center">
                        <div>
                            <Text className="font-bold text-2xl">
                                Stay focused
                            </Text>

                            <Text className="pt-2 pb-6 text-sm">
                                Add notes while on your focus sessions
                            </Text>

                            <Button
                                onClick={() => navigate("/notes")}
                            >
                                Add note
                            </Button>
                        </div>
                    </section>

                    <div className='mt-20'>
                        <div className='grid grid-container gap-x-4 gap-y-6 w-full'>
                            {
                                value.slice(0, 4).map((note) => (
                                    <div className='relative todo-weekly rounded-lg shadow-md' key={note.id}>
                                        <Text style={{ fontSize: "10px" }} className='text-right px-2'>
                                            {note.dateCreated}
                                        </Text>
                                        <div className='pt-2 border-b border-sidebar'></div>

                                        {note.notes.length >= 257 ? <div
                                            style={{ wordWrap: "break-word" }} className='p-2 text-xs'
                                            dangerouslySetInnerHTML={{ __html: note.notes.substring(0, 257) + " . . ." }}
                                        /> : <div
                                            style={{ wordWrap: "break-word" }} className='p-2 text-xs'
                                            dangerouslySetInnerHTML={{ __html: note.notes }}
                                        />}

                                        <div>

                                        </div>
                                    </div>
                                ))
                            }
                        </div>
                    </div>

                </Card>
            </section>

        </section>
    )
}

export default Home




================================================
File: src/page/Login.jsx
================================================
import React, { useState } from 'react';
import Text from '../components/elements/Text';
import { signInWithEmailAndPassword } from 'firebase/auth';
import { auth } from '../firebase';
import { NavLink, useNavigate } from 'react-router-dom'
import { Formik, Field, Form } from 'formik';
import signup from '../components/assets/bg-login.jpg';

const Login = () => {
    const navigate = useNavigate();
    const [errors, setErrors] = useState('');
    const [loading, setLoading] = useState(false);

    const initialValues = {
        email: "",
        password: "",
    }

    const validateForm = (values) => {
        const errors = {};

        if (!values.email) {
            errors.email = "Email is required";
        } else if (
            !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i.test(values.email)
        ) {
            errors.email = "Invalid email address";
        }

        if (!values.password) {
            errors.password = "Password number is required";
        } else if (values.password.length <= 8) {
            errors.password = "Password length must be more than 7"
        }

        return errors;
    }

    const onLogin = (values) => {
        setLoading(true);
        signInWithEmailAndPassword(auth, values.email, values.password)
            .then((userCredential) => {
                // Signed in 
                setLoading(false);
                const user = userCredential.user;
                navigate("/home")
                console.log(user);
            })
            .catch((error) => {
                const errorCode = error.code;
                const errorMessage = error.message;
                setErrors(errorMessage);
                setLoading(false);
                console.log(errorCode, errorMessage)
            });

    }

    return (
        <>
            <main >
                <section>
                    <div className="md:grid grid-cols-2 h-screen ">
                        <div className='flex flex-col justify-center h-screen'>
                            <div className=" px-10 ">
                                <div>
                                    <Text className="text-2xl text-white text-center font-bold mb-2">
                                        Focus<span className="text-tertiary">App</span>
                                    </Text>

                                    <h2 className="text-white text-center md:text-sm text-xs tracking-tight text-gray-900">
                                        Welcome Back
                                    </h2>
                                </div>

                                <div className='mt-4 text-xs' style={{ color: "red" }}>
                                    {errors && errors}
                                </div>

                                <div>
                                    <Formik
                                        initialValues={initialValues}
                                        validate={validateForm}
                                        onSubmit={(values) => onLogin(values)}
                                    >
                                        {
                                            ({
                                                values,
                                                errors,
                                                touched,
                                                handleChange,
                                                handleBlur,
                                                handleSubmit,
                                                isSubmitting
                                            }) => (
                                                <Form className="mt-8 space-y-6" >
                                                    <div className=" space-y-6 rounded-md shadow-sm">


                                                        <div>
                                                            <label htmlFor="email-address" className="sr-only">
                                                                Email address
                                                            </label>
                                                            <Field
                                                                type="email"
                                                                id="email"
                                                                name="email"
                                                                value={values.email}
                                                                onChange={handleChange}
                                                                className="relative block w-full appearance-none rounded-none rounded-t-md border border-gray-300 px-3 py-2 text-gray-900 placeholder-gray-500 focus:z-10 focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
                                                                placeholder="Email address"
                                                            />

                                                            <p className='text-xs' style={{ color: 'red' }}>
                                                                {errors.email && touched.email && errors.email}
                                                            </p>
                                                        </div>

                                                        <div>
                                                            <label htmlFor="password" className="sr-only">
                                                                Password
                                                            </label>
                                                            <Field
                                                                type="password"
                                                                id="password"
                                                                name="password"
                                                                value={values.password}
                                                                onChange={handleChange}
                                                                className="relative block w-full appearance-none rounded-none rounded-b-md border border-gray-300 px-3 py-2 text-gray-900 placeholder-gray-500 focus:z-10 focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
                                                                placeholder="Password"
                                                            />

                                                            <p className='text-xs' style={{ color: 'red' }}>
                                                                {errors.password && touched.password && errors.password}
                                                            </p>
                                                        </div>
                                                    </div>

                                                    <div>
                                                        <button
                                                            type="submit"
                                                            className="group relative flex w-full justify-center rounded-md border border-transparent bg-indigo-600 py-2 px-4 text-sm font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
                                                        >
                                                            <span>
                                                                {loading ? "Logging in ..." : " Login "}
                                                            </span>
                                                        </button>
                                                    </div>

                                                </Form>
                                            )
                                        }
                                    </Formik>
                                </div>

                            </div>

                            <p className="text-sm mt-10 text-white text-center">
                                No account yet?{' '}
                                <NavLink to="/signup" className="underline text-tertiary">
                                    Sign up
                                </NavLink>
                            </p>
                        </div>


                        <div className='bg-sidebar md:block hidden text-secondary h-screen'>
                            <div className='flex items-center justify-center bg-no-repeat bg-center bg-cover h-screen' style={{backgroundImage: "url('/bg-login.jpg')" }}>                                
                            </div>
                        </div>
                    </div>
                </section>
            </main>
        </>
    )
}

export default Login

================================================
File: src/page/NotFound.jsx
================================================
import React from 'react'
import { NavLink } from 'react-router-dom'

const NotFound = () => {
    return (
        <section className='h-screen flex items-center justify-center'>
            <div className='text-white text-center '>
                <p className='text-2xl font-bold pb-2'> Page Not Found </p>
                <p>
                    <NavLink className="underline-offset-4 underline" to="/">
                        Return to Login
                    </NavLink>
                </p>
            </div>
        </section>
    )
}

export default NotFound

================================================
File: src/page/NoteDetail.jsx
================================================
import React, { useEffect, useState } from 'react'
import { useParams, useNavigate, NavLink } from 'react-router-dom';
import { collection, query, where, doc, updateDoc, deleteField, getDocs, deleteDoc } from "firebase/firestore";
import { db, auth } from '../firebase';
import { onAuthStateChanged } from 'firebase/auth';
import { AiFillDelete } from 'react-icons/ai';
import { BsPencilSquare } from 'react-icons/bs';
import { BiArrowBack } from 'react-icons/bi';

import { CKEditor } from '@ckeditor/ckeditor5-react';
import ClassicEditor from '@ckeditor/ckeditor5-build-classic';


const NoteDetail = () => {
    const { id } = useParams();
    const navigate = useNavigate();


    const [data, setData] = useState([]);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState("");
    const [user, setUser] = useState("");
    const [open, setOpen] = useState(false);
    const [notes, setNotes] = useState();

    const fetchData = async () => {
        try {
            // const querySnapshot = await getDocs(collection(db, "notes"), where("uid", "==", user));
            setLoading(true);
            const q = query(collection(db, "notes"), where("uid", "==", user));
            const querySnapshot = await getDocs(q);
            const fetchedData = [];
            querySnapshot.forEach((doc) => {
                setLoading(false);
                fetchedData.push({ id: doc.id, ...doc.data() });
            });

            setData(fetchedData);
        } catch (error) {
            console.error("Error fetching documents:", error);
        }
    };

    const handleDeleteNote = async () => {
        try {
            await deleteDoc(doc(db, "notes", id));
            navigate(-1);
        } catch (error) {
            console.error("Error deleting document: ", error);
        }
    }

    const note = data.find(item => item.id === id);

    useEffect(() => {
        onAuthStateChanged(auth, (user) => {
            if (user) {
                const uid = user.uid;
                setUser(uid);
            } else {
                console.log("Wahala de");
            }
        });

    }, [user])

    useEffect(() => {
        fetchData();
    }, [user, notes])


    const onEdit = () => {
        setOpen(prev => !prev)
    }

    const onUpdateNotes = async () => {
        setOpen(prev => !prev);

        const updateRef = doc(db, "notes", note.id);
        
        await updateDoc(updateRef, {
            notes : notes
        })

        navigate("/notes");
    }

    if (!note) {
        return (
            <div className='mt-6'>
                <p className='text-white'>
                    Note not found. <NavLink to="/notes"
                        className='text-sm underline'
                    >return to notes</NavLink >
                </p>
            </div>
        )
    }

    return (
        <>
            {
                open ? <>
                    <form className='mt-10'>

                        <div >
                            <CKEditor
                                editor={ClassicEditor}
                                data={note.notes}
                                className='w-full bg-sidebar text-sm'
                                onReady={editor => {
                                    // You can store the "editor" and use when it is needed.                                    
                                }}
                                onChange={(event, editor) => {
                                    const data = editor.getData();
                                    // console.log({ event, editor, data });
                                    setNotes(data);
                                }}
                                onBlur={(event, editor) => {
                                }}
                                onFocus={(event, editor) => {
                                }}
                            />
                        </div>

                        <div className='flex justify-end'>
                            <button className='px-6 py-2 text-xs text-white bg-sidebar mt-4' onClick={onUpdateNotes}>
                                Update
                            </button>
                        </div>

                    </form>
                </> : <>
                    <div className='mt-10 text-white px-3 md:px-0'>
                        <h3 className='pb-1'>Note detail</h3>
                        <div className='flex justify-between items-center border-t border-secondary pt-2 text-right text-xs'>
                            <p className='text-lg '><BiArrowBack className='cursor-pointer' onClick={() => navigate(-1)} /></p>
                            <p style={{ fontSize: "12px" }} >
                                {note.dateCreated}
                            </p>
                        </div>
                        <div className='text-sm mt-8'>
                            <div
                                dangerouslySetInnerHTML={{ __html: note.notes }}
                            />
                        </div>

                        <div className='flex justify-center space-x-4 text-lg mt-20'>
                            <BsPencilSquare onClick={onEdit} className='cursor-pointer' />
                            <AiFillDelete className='cursor-pointer' onClick={handleDeleteNote} />

                        </div>
                    </div>
                </>
            }


        </>
    )
}

export default NoteDetail

================================================
File: src/page/Notes.jsx
================================================
import React, { useEffect, useRef, useState } from 'react';
import { BsPlusLg } from 'react-icons/bs';
import { FiSearch } from 'react-icons/fi';
import { collection, query, where, addDoc, getDocs } from "firebase/firestore";
import { db, auth } from '../firebase';
import { onAuthStateChanged } from 'firebase/auth';
import { NavLink } from 'react-router-dom';
import moment from 'moment/moment';


import { CKEditor } from '@ckeditor/ckeditor5-react';
import ClassicEditor from '@ckeditor/ckeditor5-build-classic';

const Notes = () => {

  const [openSearchNotes, setOpenSearchNotes] = useState(false);
  const [notes, setNotes] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [user, setUser] = useState("");
  const [data, setData] = useState([]);

  const handleOpenSearchTab = () => {
    setOpenSearchNotes(prevState => !prevState);
  }

  const handleAddNotesToDb = async () => {
    if (notes.trim() === "") {
      setError("Notes cannot be empty.");
      return;
    }


    setLoading(true);

    try {
      const docRef = await addDoc(collection(db, "notes"), {
        notes: notes,
        uid: user,
        dateCreated: moment().format("MMM Do YY")
      });

      setLoading(false);
      setNotes("");

     

    } catch (error) {
      console.error("Error adding document:", error);
      setError("Error adding the note.");
    }

  }

  const fetchData = async () => {
    try {
      const q = query(collection(db, "notes"), where("uid", "==", user));
      const querySnapshot = await getDocs(q);
      const fetchedData = [];
      querySnapshot.forEach((doc) => {
        setLoading(false);
        fetchedData.push({ id: doc.id, ...doc.data() });
      });

      setData(fetchedData);
    } catch (error) {
      console.error("Error fetching documents:", error);
    }
  };


  useEffect(() => {
    onAuthStateChanged(auth, (user) => {
      if (user) {
        const uid = user.uid;
        setUser(uid);
      } else {
        console.log("Wahala de");
      }
    });

  }, [user])

  useEffect(() => {
    fetchData();
  }, [user, notes])


  return (
    <section className="text-white mt-10 mb-20 px-3 md:px-0">
      {
        openSearchNotes && <form className='mb-6 w-full relative'>
          <input
            type='search'
            placeholder='Search ...'
            className='text-secondary w-1/2 text-sm'
          />
        </form>
      }


      <div className='bg-sidebar'>

        <div className='bg-sidebar px-4 py-2 flex justify-between items-center'>

          <BsPlusLg className='text-white' />

          <FiSearch className='text-white' onClick={handleOpenSearchTab} />

        </div>


        <div>
          {error && <p style={{ color: "red" }} className='text-red-600 text-sm'>{error}</p>}
          <form>

            <div >
              <CKEditor
                editor={ClassicEditor}
                data={notes}
                className='w-full bg-sidebar text-sm'
                onReady={editor => {
                  // You can store the "editor" and use when it is needed.
                  console.log('Editor is ready to use!', editor);
                }}
                onChange={(event, editor) => {
                  const data = editor.getData();
                  setNotes(data);
                }}
                onBlur={(event, editor) => {
                }}
                onFocus={(event, editor) => {
                }}
              />
            </div>

          </form>
        </div>
      </div>

      <div className='flex justify-end py-2'>
        <button
          type="submit"
          onClick={handleAddNotesToDb}
          className="px-6 py-2 text-xs text-white bg-sidebar"
        >
          {loading ? "Adding note . . ." : "Add note"}
        </button>
      </div>

      <div className='mt-16 grid grid-container gap-x-4 gap-y-6 '>
        {
          data.length == 0 && <div>
            <p>
              You have no notes
            </p>
          </div>
        }

        {
          data.map((note) => (
            <NavLink to={`/notes/${note.id}`} className='relative todo-weekly rounded-lg shadow-md' key={note.id}>
              <p style={{ fontSize: "10px" }} className='text-right px-2'>
                {note.dateCreated}
              </p>
              <div className='pt-2 border-b border-sidebar'></div>

              {note.notes.length >= 257 ? <div
                style={{ wordWrap: "break-word" }} className='p-2 text-xs'
                dangerouslySetInnerHTML={{ __html: note.notes.substring(0, 257) + " . . ." }}
              /> : <div
                style={{ wordWrap: "break-word" }} className='p-2 text-xs'
                dangerouslySetInnerHTML={{ __html: note.notes }}
              />}

              <div>

              </div>
            </NavLink>
          ))
        }


      </div>
    </section>
  )
}

export default Notes

================================================
File: src/page/Signup.jsx
================================================
import React, { useEffect, useState } from 'react';
import Text from '../components/elements/Text';
import { NavLink, useNavigate } from 'react-router-dom';
import { createUserWithEmailAndPassword, updateProfile } from 'firebase/auth';
import { auth } from '../firebase';
import { Formik, Field, Form } from 'formik';

const Signup = () => {
    const navigate = useNavigate();

    const [errors, setErrors] = useState('');
    const [loading, setLoading] = useState(false);

    const initialValues = {
        firstName: "",
        lastName: "",
        email: "",
        password: "",
        confirmPassword: "",
    }

    const validateForm = (values) => {
        const errors = {};

        if (!values.firstName) {
            errors.firstName = "First name is required";
        } else if (values.firstName.length <= 3) {
            errors.firstName = 'Must be 3 characters or more';
        }

        if (!values.lastName) {
            errors.lastName = "Last name is required";
        } else if (values.lastName.length <= 3) {
            errors.lastName = 'Must be 3 characters or more';
        }

        if (!values.email) {
            errors.email = "Email is required";
        } else if (
            !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i.test(values.email)
        ) {
            errors.email = "Invalid email address";
        }

        if (!values.password) {
            errors.password = "Password number is required";
        } else if (values.password.length <= 8) {
            errors.password = "Password length must be more than 7"
        }

        if (values.password !== values.confirmPassword) {
            errors.password = "Password does not match!";
        }

        return errors;
    }

    const onSubmitSignupForm = async (values) => {
        setLoading(true);
        await createUserWithEmailAndPassword(auth, values.email, values.password)
            .then((userCredential) => {
                // Signed in 
                setLoading(false);
                const user = userCredential.user;
                console.log(user);
                navigate("/")
                // ...
            })
            .catch((error) => {
                const errorCode = error.code;
                const errorMessage = error.message;
                setErrors(errorMessage);
                setLoading(false);
                console.log(errorCode, errorMessage);
                // ..
            });

        await updateProfile(auth.currentUser, {
            displayName: `${values.firstName} ${values.lastName}`,
        }).then(() => {
            console.log("updated successfully");
        }).catch((error) => {
            console.log("error updating name");
            console.log(error);
        })
    }
   

    return (
        <main >
            <section>
                <div className="grid md:grid-cols-2 h-screen  ">
                    <div className="md:w-full w-4/5 mx-auto ">
                        <div className='flex md:w-4/5  mx-auto flex-col justify-center h-screen '>
                            <div>
                                <div>
                                    <Text className="text-2xl text-white text-center font-bold mb-2">
                                        Focus<span className="text-tertiary">App</span>
                                    </Text>

                                    <h2 className="text-white text-center text-sm md:text-xs tracking-tight text-gray-900">
                                        Are you new? Sign up today
                                    </h2>
                                </div>

                                <div className='mt-4 text-xs' style={{ color: "red" }}>
                                    {errors && errors}
                                </div>

                                <div>
                                    <Formik
                                        initialValues={initialValues}
                                        validate={validateForm}
                                        onSubmit={(values) => onSubmitSignupForm(values)}
                                    >
                                        {
                                            ({
                                                values,
                                                errors,
                                                touched,
                                                handleChange,
                                                handleBlur,
                                                handleSubmit,
                                                isSubmitting
                                            }) => (
                                                <Form className="mt-8 space-y-6" >
                                                    <div className=" space-y-6 rounded-md shadow-sm">
                                                        <div>
                                                            <label htmlFor="email-address" className="sr-only">
                                                                First name
                                                            </label>
                                                            <Field
                                                                type="firstName"
                                                                id="firstName"
                                                                name="firstName"
                                                                value={values.firstName}
                                                                onChange={handleChange}
                                                                className="relative block w-full appearance-none rounded-none rounded-t-md border border-gray-300 px-3 py-2 text-gray-900 placeholder-gray-500 focus:z-10 focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
                                                                placeholder="First name"
                                                            />
                                                            <p className='text-xs' style={{ color: 'red' }}>
                                                                {errors.firstName && touched.firstName && errors.firstName}
                                                            </p>
                                                        </div>

                                                        <div>
                                                            <label htmlFor="email-address" className="sr-only">
                                                                Last name
                                                            </label>
                                                            <Field
                                                                type="lastName"
                                                                id="lastName"
                                                                name="lastName"
                                                                value={values.lastName}
                                                                onChange={handleChange}
                                                                className="relative block w-full appearance-none rounded-none rounded-t-md border border-gray-300 px-3 py-2 text-gray-900 placeholder-gray-500 focus:z-10 focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
                                                                placeholder="Last name"
                                                            />
                                                            <p className='text-xs' style={{ color: 'red' }}>
                                                                {errors.lastName && touched.lastName && errors.lastName}
                                                            </p>
                                                        </div>

                                                        <div>
                                                            <label htmlFor="email-address" className="sr-only">
                                                                Email address
                                                            </label>
                                                            <Field
                                                                type="email"
                                                                id="email"
                                                                name="email"
                                                                value={values.email}
                                                                onChange={handleChange}
                                                                className="relative block w-full appearance-none rounded-none rounded-t-md border border-gray-300 px-3 py-2 text-gray-900 placeholder-gray-500 focus:z-10 focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
                                                                placeholder="Email address"
                                                            />

                                                            <p className='text-xs' style={{ color: 'red' }}>
                                                                {errors.email && touched.email && errors.email}
                                                            </p>
                                                        </div>

                                                        <div>
                                                            <label htmlFor="password" className="sr-only">
                                                                Password
                                                            </label>
                                                            <Field
                                                                type="password"
                                                                id="password"
                                                                name="password"
                                                                value={values.password}
                                                                onChange={handleChange}
                                                                className="relative block w-full appearance-none rounded-none rounded-b-md border border-gray-300 px-3 py-2 text-gray-900 placeholder-gray-500 focus:z-10 focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
                                                                placeholder="Password"
                                                            />

                                                            <p className='text-xs' style={{ color: 'red' }}>
                                                                {errors.password && touched.password && errors.password}
                                                            </p>
                                                        </div>

                                                        <div>
                                                            <label htmlFor="password" className="sr-only">
                                                                Confirm Password
                                                            </label>
                                                            <Field
                                                                type="password"
                                                                id="confirmPassword"
                                                                name="confirmPassword"
                                                                value={values.confirmPassword}
                                                                onChange={handleChange}
                                                                className="relative block w-full appearance-none rounded-none rounded-b-md border border-gray-300 px-3 py-2 text-gray-900 placeholder-gray-500 focus:z-10 focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
                                                                placeholder="Confirm Password"
                                                            />
                                                        </div>
                                                    </div>

                                                    <div>
                                                        <button
                                                            type="submit"
                                                            className="group relative flex w-full justify-center rounded-md border border-transparent bg-indigo-600 py-2 px-4 text-sm font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
                                                        >
                                                            <span>
                                                                {loading ? "Creating Account ..." : " Sign up"}
                                                            </span>
                                                        </button>
                                                    </div>
                                                </Form>
                                            )
                                        }

                                    </Formik>
                                </div>
                            </div>

                            <p className="mt-10 text-sm text-white text-center">
                                Already have an account?{' '}
                                <NavLink to="/" className="underline text-tertiary">
                                    Sign in
                                </NavLink>
                            </p>
                        </div>
                    </div>

                    <div className='bg-sidebar md:block hidden h-screen'>
                        <div className='flex items-center justify-center bg-no-repeat bg-center bg-cover h-screen' style={{ backgroundImage: "url('/bg-login.jpg')" }}>
                        </div>
                    </div>
                </div>
            </section>
        </main>

    )
}

export default Signup

================================================
File: src/store/index.js
================================================
import { configureStore } from '@reduxjs/toolkit';
import userReducer from './features/userSlice';
import noteReducer from './features/noteSlice';
import logger from 'redux-logger'

export const store = configureStore({
  reducer: {
    user: userReducer,
    note: noteReducer
  },
//   middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),
})

================================================
File: src/store/features/noteSlice.js
================================================
import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { collection, query, where, getDocs } from "firebase/firestore";
import { db } from "../../firebase";

const initialState = {
  value: [],
  status: "idle",
  error: null
};

export const notesFetch = createAsyncThunk("note/notesFetch", async (user) => {
  try {
    const q = query(collection(db, "notes"), where("uid", "==", user));
    const querySnapshot = await getDocs(q);

    const fetchedData = querySnapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      }));

    // const fetchedData = querySnapshot.map((doc) => ({
    //   id: doc.id,
    //   ...doc.data(),
    // }));

    return fetchedData;
  } catch (error) {
    throw error;
  }
});

export const noteSlice = createSlice({
  name: "note",
  initialState,
  reducers: {},
  extraReducers: {
    [notesFetch.pending]: (state, action) => {
      state.status = "pending";
    },
    [notesFetch.fulfilled]: (state, action) => {
      state.status = "success";
      state.value = action.payload;
    },
    [notesFetch.rejected]: (state, action) => {
      state.status = "rejected";
      state.error = action.error.message;
    },
  },
});

export default noteSlice.reducer;


================================================
File: src/store/features/userSlice.js
================================================
import { createSlice } from "@reduxjs/toolkit";
import { onAuthStateChanged } from "firebase/auth";
import { auth } from "../../firebase";

const initialState = {
  value: "",
};

export const userSlice = createSlice({
  name: "user",
  initialState,
  reducers: {
    setCurrentUser: (state, action) => {
      state.value = action.payload;
    },
  },
});

export const { setCurrentUser } = userSlice.actions;

export const getCurrentUser = () => (dispatch) => {
  onAuthStateChanged(auth, (user) => {
    if (user) {
      const uid = user;     
      dispatch(setCurrentUser(uid));
    } else {
      console.log("Unable to get current user");
    }
  });
};

export default userSlice.reducer;


